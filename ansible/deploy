#!/bin/bash

case $TARGET_OPENSHIFT_RELEASE in
    v3.9|v3.10) ;;
    *)
        echo Unsupported Openshift version: $TARGET_OPENSHIFT_RELEASE
        exit 1
esac

export ROOT_DIR="$(dirname $0)"

stage=install
default_stage=install
STAGES="pre install post getup scaleup upgrade-control-plane upgrade-nodes uninstall gen-hosts playbook redeploy-certificates"

function stage_is()
{
    for _stage; do
        [ "${stage}" == "${_stage}" ] && return
    done
    return 1
}

function run_stage()
{
    source /getup-engine/ansible/stages/${stage}.sh $@
}

ansible_args=()
while [ $# -gt 0 ]; do
    case "$1" in
        stage=*)
            stage=${1#*=}
            shift
        ;;
        -h|--help)
            echo "$0 [stage=${STAGES// / | }] [ansible-args...]"
            exit
        ;;
        *)
            ansible_args[${#ansible_args[*]}]="$1"
            shift
    esac
done

if ! stage_is $default_stage $STAGES; then
    echo Invalid stage: $stage
    exit 1
fi

trap save-state EXIT
echo "Running stage: $stage"
echo "Ansible args: ${ansible_args[*]}"

setup-ssh

set -e

[ -d $STATE_DIR ] || mkdir -p $STATE_DIR

# Loading defaults
for file in ${ROOT_DIR}/roles/defaults/*; do
    EXPORT=1 config2env $file
done > /tmp/ansible-defaults.env
echo Sourcing ansible defaults /tmp/ansible-defaults.env
source /tmp/ansible-defaults.env

# Load inputs
for file in getupengine.env terraform-out.env; do
    echo Sourcing $STATE_DIR/$file
    source $STATE_DIR/$file
done

# Setup openshift-ansible

export ANSIBLE_REMOTE_USER=${DEFAULT_USER:-centos}
export MASTER_NODES_TOTAL=$(echo $MASTER_HOSTNAMES | wc -w)
export INFRA_NODES_TOTAL=$(echo $INFRA_HOSTNAMES | wc -w)
export APP_NODES_TOTAL=$(echo $NODE_HOSTNAMES | wc -w)

if [ -z "${CONTAINERIZED}" ];then
    export CONTAINERIZED=${CONTAINERIZED:-false}
    echo "CONTAINERIZED=${CONTAINERIZED}" >> $STATE_DIR/getupengine.env
fi

if [ -z "${OPENSHIFT_MASTER_SESSION_AUTH_SECRETS}" ]; then
    export OPENSHIFT_MASTER_SESSION_AUTH_SECRETS="$(openssl rand -base64 24)"
    echo "OPENSHIFT_MASTER_SESSION_AUTH_SECRETS='${OPENSHIFT_MASTER_SESSION_AUTH_SECRETS}'" >> $STATE_DIR/getupengine.env
fi

if [ -z "${OPENSHIFT_MASTER_SESSION_ENCRYPTION_SECRETS}" ]; then
    export OPENSHIFT_MASTER_SESSION_ENCRYPTION_SECRETS="$(openssl rand -base64 24)"
    echo "OPENSHIFT_MASTER_SESSION_ENCRYPTION_SECRETS='${OPENSHIFT_MASTER_SESSION_ENCRYPTION_SECRETS}'" >> $STATE_DIR/getupengine.env
fi

# Azure needs fqdn
INTERNAL_DOMAIN_SUFFIX=''
if [ "${PROVIDER}" == "azure" ]; then
    # is there a better (terraform) way to do this?
    INTERNAL_DOMAIN_SUFFIX=".$(az network nic list --query "[?name == 'master-1'].dnsSettings.internalDomainNameSuffix" -o tsv)"
fi
export INTERNAL_DOMAIN_SUFFIX

if [ ! -v SSH_AGENT_PID ]; then
    source setup-ssh
fi

export HOSTS_FILE=$STATE_DIR/hosts-${TARGET_OPENSHIFT_VERSION}

gen_hosts()
{
    if [ -v STATIC_HOSTS_FILE -a -e "${STATIC_HOSTS_FILE}" ]; then
        echo Using static hosts file $STATIC_HOSTS_FILE
        return
    fi

    target_hosts=${1:-$HOSTS_FILE}
    hosts_in=/getup-engine/ansible/hosts-${TARGET_OPENSHIFT_RELEASE}.in
    hosts_extra_in=/state/hosts-${TARGET_OPENSHIFT_RELEASE}.extra.in

    source gen-hosts $hosts_in $hosts_extra_in > ${target_hosts}.tmp
    mv ${target_hosts}.tmp ${target_hosts}
    stage_is gen-hosts || sleep 3
}

# Start install
cd $ROOT_DIR

gen_hosts

if stage_is playbook; then
    # first arg is the path to playbook or playbook name from /getup-engine/ansible/playbooks/ or /openshift-ansible/playbooks/
    playbook_name=${ansible_args[0]}
    unset ansible_args[0]

    if [ "${playbook_name:0:1}" != '/' ]; then
        playbook_path=$(realpath $OLDPWD/${playbook_name})

        for playbook_dirs in $OLDPWD/ansible/playbooks /openshift-ansible/playbooks; do
            playbook_basename=$playbook_dirs/${playbook_name}/config
            if [ -e $playbook_basename.yaml ]; then
                playbook_path=$(realpath $playbook_basename.yaml)
                break
            elif [ -e $playbook_basename.yml ]; then
                playbook_path=$(realpath $playbook_basename.yml)
                break
            fi
        done
    else
        playbook_path=${playbook_name}
    fi

    echo Starting playbook: $playbook_path
    exec ansible-playbook -i $HOSTS_FILE $playbook_path ${ansible_args[*]}
fi

if stage_is redeploy-certificates; then
    exec ansible-playbook -i $HOSTS_FILE playbooks/redeploy-certificates/config.yml ${ansible_args[*]}
fi

if stage_is upgrade-control-plane || stage_is upgrade-nodes; then
    upgrade_playbook=${stage//-/_}

    echo -n "Discovering cluster version... "
    export CURRENT_OPENSHIFT_FULL_VERSION=$(oc version 2>/dev/null | grep -i ^openshift | grep -o 'v[0-9]\.[0-9]\+\.[0-9]\+')
    export CURRENT_OPENSHIFT_RELEASE=$(cut -f1,2 -d. <<<$CURRENT_OPENSHIFT_FULL_VERSION)
    export CURRENT_OPENSHIFT_VERSION=${CURRENT_OPENSHIFT_FULL_VERSION:1}

    export CURRENT_HOSTS=$STATE_DIR/hosts-${CURRENT_OPENSHIFT_VERSION}
    export TARGET_HOSTS=$STATE_DIR/hosts-${TARGET_OPENSHIFT_VERSION}

    echo
    echo "Starting $stage: ${CURRENT_OPENSHIFT_VERSION} -> ${TARGET_OPENSHIFT_VERSION}"

    if [ ! -e $CURRENT_HOSTS ]; then
        echo Missing current hosts file: $CURRENT_HOSTS
        exit 1
    fi

    # TARGET_OPENSHIFT_{VERSION,RELEASE} comes from docker image installer
    major=$(cut -f1 -d. <<<$CURRENT_OPENSHIFT_VERSION)
    minor=$(cut -f2 -d. <<<$CURRENT_OPENSHIFT_VERSION)
    patch=$(cut -f3 -d. <<<$CURRENT_OPENSHIFT_VERSION)
    target_major=$(cut -f1 -d. <<<$TARGET_OPENSHIFT_VERSION)
    target_minor=$(cut -f2 -d. <<<$TARGET_OPENSHIFT_VERSION)
    target_patch=$(cut -f3 -d. <<<$TARGET_OPENSHIFT_VERSION)

    if [ $target_major != $major ]; then
        echo "Unable to change/upgrade major version: $major -> $target_major"
       exit 1
    fi

    if [ $target_minor -le $minor -a $target_patch -lt $patch ]; then
        echo "Forbiden to downgrade: ${CURRENT_OPENSHIFT_VERSION} -> ${TARGET_OPENSHIFT_VERSION}"
        exit 1
    fi

    if [ ! -e ${CURRENT_HOSTS}-pre-upgrade-$TARGET_OPENSHIFT_VERSION ]; then
        cp -f $CURRENT_HOSTS ${CURRENT_HOSTS}-pre-upgrade-$TARGET_OPENSHIFT_VERSION
    fi

    gen_hosts $TARGET_HOSTS

    ansible-playbook -i $HOSTS_FILE playbooks/node/config.yml --tags=pre-upgrade-control-plane,pre-upgrade-control-plane-$TARGET_OPENSHIFT_VERSION ${ansible_args[*]}

    if stage_is upgrade-control-plane && [ "$TARGET_OPENSHIFT_RELEASE" == 'v3.10' ]; then
        ansible-playbook -i $HOSTS_FILE /openshift-ansible/playbooks/openshift-master/openshift_node_group.yml
    fi

    upgrade_playbook=/usr/share/ansible/openshift-ansible/playbooks/byo/openshift-cluster/upgrades/${TARGET_OPENSHIFT_RELEASE//./_}/${upgrade_playbook}.yml
    if ! ansible-playbook -i $TARGET_HOSTS $upgrade_playbook ${ansible_args[*]}; then
        echo Upgrade has failed
        exit 1
    fi

    if stage_is upgrade-control-plane && [ "$TARGET_OPENSHIFT_RELEASE" == 'v3.10' -a "$INSTALL_MONITORING" == true ]; then
        ansible-playbook -i $TARGET_HOSTS /openshift-ansible/playbooks/openshift-grafana/config.yml ${ansible_args[*]}
    fi

    oc version
    oc get nodes
    echo Finished upgrade
    exit
#elif stage_is upgrade-infra; then
#    source /getup-engine/ansible/scripts/infra-rollout
#    exit
fi

if stage_is gen-hosts; then
    echo Generated file $HOSTS_FILE
    exit
fi

if stage_is uninstall; then
    exec ansible-playbook -i $HOSTS_FILE /usr/share/ansible/openshift-ansible/playbooks/adhoc/uninstall.yml ${ansible_args[*]}
fi

if stage_is $default_stage pre scaleup; then
    ansible-playbook -i $HOSTS_FILE playbooks/node/config.yml --tags=pre-install,pre-install-${TARGET_OPENSHIFT_RELEASE} ${ansible_args[*]}
fi

if stage_is scaleup; then
    if [ ! -e $HOSTS_FILE-pre-scale ]; then
        cp -f $HOSTS_FILE $HOSTS_FILE-pre-scale
    fi
    run_stage  -i $HOSTS_FILE ${ansible_args[*]}
    # move [new_nodes] to [nodes]
    old_stage=$stage
    stage=""
    gen_hosts
    stage=$old_stage
fi

if stage_is $default_stage install; then
    run_stage -i $HOSTS_FILE ${ansible_args[@]}
fi

if stage_is $default_stage post scaleup; then
    ansible-playbook -i $HOSTS_FILE playbooks/node/config.yml --tags=post-install,post-install-${TARGET_OPENSHIFT_RELEASE} ${ansible_args[*]}
fi

if [ "${GETUPCLOUD_DATABASE_MODE}" == 'managed' ]; then
    echo
    echo
    COLOR_YELLOW=$(tput sgr0 && tput setaf 3 && tput bold)
    COLOR_RESET=$(tput sgr0)
    echo -e "${COLOR_YELLOW}"
    echo -ne "MAKE SURE TO CONFIGURE FIREWALL FOR MANAGED DATABASE.\n[Press ENTER to continue] "
    echo -ne "${COLOR_RESET}"
    read _discard
fi

if stage_is $default_stage getup; then
    ansible-playbook -i $HOSTS_FILE playbooks/getup/config.yml ${ansible_args[*]}
fi

echo -e "${COLOR_YELLOW}"
cat <<EOF
#########################################################################
## Installation Summary
#########################################################################

-- Main Endpoints ------------

          Portal: https://$PORTAL_ENDPOINT -- web portal
        Rest API: https://$API_ENDPOINT -- kubernetes/openshift API
      Apps CNAME: $INFRA_ENDPOINT -- point here your app's custom domain

 Getup Cloud API: https://gapi.${CLUSTER_ZONE}/api/
    Django admin: https://gapi.${CLUSTER_ZONE}/admin/
     User signup: https://gapi.${CLUSTER_ZONE}/manager/add-user/

    Bastion host: $BASTION_ENDPOINT -- use to jump-access cluster hosts
    Master hosts: $MASTER_HOSTNAMES -- manage the cluster from one of those

-- Admin Info ---------------

          Admin credentials: ${GETUPCLOUD_API_ADMIN_USERNAME} / ${GETUPCLOUD_API_ADMIN_PASSWORD}
    Impersonate credentials: ${GETUPCLOUD_API_IMPERSONATE_USERNAME} / ${GETUPCLOUD_API_IMPERSONATE_PASSWORD}

-- Monitoring ----------------

    Prometheus: https://prometheus.${CLUSTER_ZONE}
       Grafana: https://grafana.${CLUSTER_ZONE}

-- CommandLine Client Tool ----------

    $ curl -L https://gapi.${CLUSTER_ZONE}/install > oc-installer.sh && sh oc-installer.sh

EOF
echo -e "${COLOR_RESET}"
